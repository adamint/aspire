@namespace Aspire.Dashboard.Components.Controls

@implements IAsyncDisposable
@using Aspire.Dashboard.Resources
@inherits Aspire.Dashboard.Components.Controls.Chart.ChartBase

<div id="metric-table-container" style="height: 40vh; overflow-y: auto; margin-bottom: 20px;">
    <FluentDataGrid Items="@_metricsView" ItemSize="35" Virtualize="true">
        <ChildContent>
            <TemplateColumn Class="metric-grid-cell" Title="@Loc[nameof(ControlsStrings.MetricTableStartColumnHeader)]">
                @context.DateTime.ToLocalTime()
            </TemplateColumn>

            @if (IsHistogramInstrument() && !_showCount)
            {
                // these colors line up with P50/P90/P99 colors for the plotly graph
                var percentileColumns = new List<(int Percentile, string UnderlineColor)> { (50, "#89B5D3"), (90, "#F9B980"), (99, "#8FC98F") };
                foreach (var (percentile, underlineColor) in percentileColumns)
                {
                    <TemplateColumn Title="@((_metricsView.FirstOrDefault() as HistogramMetricView)?.Percentiles[percentile].Name ?? $"P{percentile}")">
                        @if (context is HistogramMetricView histogramMetric)
                        {
                            var percentileData = histogramMetric.Percentiles[percentile];

                            <span style="@($"text-decoration-thickness: 2px; text-decoration-line: underline; text-decoration-color: {underlineColor}; margin-right: 4px;")">
                                @percentileData.Value
                            </span>

                            if (GetIconAndTitleForDirection(percentileData.Direction) is var (icon, title))
                            {
                                <FluentIcon Style="vertical-align: text-bottom" Value="@icon" Title="@title"/>
                            }
                        }
                    </TemplateColumn>
                }
            }
            else
            {
                <TemplateColumn Title="@_unitColumnHeader">
                    @{
                        var metricValueView = (MetricValueView)context;
                    }

                    @if (metricValueView.ValueChange is null)
                    {
                        @metricValueView.Value
                    }
                    else
                    {
                        <span style="margin-right: 4px;">@metricValueView.Value</span>
                        if (GetIconAndTitleForDirection(metricValueView.ValueChange) is var (icon, title))
                        {
                            <FluentIcon Style="vertical-align: text-bottom" Value="@icon" Title="@title"/>
                        }
                    }
                </TemplateColumn>
            }
        </ChildContent>
        <EmptyContent>
            @Loc[nameof(ControlsStrings.MetricTableNoValuesYet)]
        </EmptyContent>
    </FluentDataGrid>
</div>
