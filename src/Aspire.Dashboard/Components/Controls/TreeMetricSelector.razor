@using Aspire.Dashboard.Components.Pages
@using Aspire.Dashboard.Model

@inject IStringLocalizer<Metrics> Loc

<FluentTreeView Id="metric-selector" Class="metrics-tree" @bind-CurrentSelected="@PageViewModel.SelectedTreeItem" @bind-CurrentSelected:after="HandleSelectedTreeItemChangedAsync">
    <ChildContent>
        @if (PageViewModel.Dashpages.Length is not 0)
        {
            var filteredDashpages = PageViewModel.Dashpages.Where(PageViewModel.IsDashpageAvailable).ToList();

            if (filteredDashpages.Count is not 0)
            {
                <FluentTreeItem Text="@Loc[Aspire.Dashboard.Resources.Metrics.DashpagesSectionName]" title="@Loc[Aspire.Dashboard.Resources.Metrics.DashpagesSectionName]" InitiallyExpanded="true">
                    @foreach (var dashpage in filteredDashpages)
                    {
                        <FluentTreeItem @key="dashpage" Class="nested" Text="@dashpage.Name" Data="@dashpage" title="@dashpage.Name" InitiallySelected="@(dashpage.Name == PageViewModel.SelectedDashpage?.Name)"/>
                    }
                </FluentTreeItem>
            }
        }

        @foreach (var meterGroup in PageViewModel.Instruments!.GroupBy(i => i.Parent).OrderBy(g => g.Key.MeterName))
        {
            <FluentTreeItem @key="meterGroup.Key" Text="@meterGroup.Key.MeterName" Data="@meterGroup.Key" title="@meterGroup.Key.MeterName" InitiallyExpanded="true" InitiallySelected="@(PageViewModel.SelectedInstrument == null && meterGroup.Key.MeterName == PageViewModel.SelectedMeter?.MeterName)">
                @foreach (var instrument in meterGroup.OrderBy(i => i.Name))
                {
                    <FluentTreeItem @key="instrument" Class="nested" Text="@instrument.Name" Data="@instrument" title="@instrument.Name" InitiallySelected="@(instrument.Name == PageViewModel.SelectedInstrument?.Name && instrument.Parent.MeterName == PageViewModel.SelectedMeter?.MeterName)"/>
                }
            </FluentTreeItem>
        }
    </ChildContent>
</FluentTreeView>

@code {
    [Parameter, EditorRequired]
    public required Func<Task> HandleSelectedTreeItemChangedAsync { get; set; }

    [Parameter, EditorRequired]
    public required Metrics.MetricsViewModel PageViewModel { get; set; }
}
