@using Aspire.Dashboard.Resources
@using Aspire.Dashboard.Otlp.Model.MetricValues
@using Aspire.Dashboard.Otlp.Model
@inject IStringLocalizer<ControlsStrings> Loc

<FluentDataGrid Items="@Metrics" ItemSize="35" Virtualize="true">
    <ChildContent>
        <TemplateColumn Class="metric-grid-cell" Title="@Loc[nameof(ControlsStrings.MetricTableStartColumnHeader)]" Tooltip="true" TooltipText="@(metric => metric.DimensionName)">
            <span aria-live="polite">@context.Value.Start</span>
            @if (AnyDimensionsShown)
            {
                <FluentIcon Icon="Icons.Filled.Size16.DataBarVertical" Color="Color.Info" Style="margin-left: 3px; vertical-align: text-bottom"/>
            }
        </TemplateColumn>

        <PropertyColumn Property="@(c => c.Value.End)" Title="@Loc[nameof(ControlsStrings.MetricTableEndColumnHeader)]"/>

        @if (TableType == MetricTable.TableType.Instrument)
        {
            <TemplateColumn Title="@Loc[nameof(ControlsStrings.MetricTableValueColumnHeader)]">
                @if (context.ValueChange is null)
                {
                    @context.Value
                }
                else
                {
                    <span style="margin-right: 4px;">@context.Value</span>
                    if (GetIconAndTitleForDirection(context.ValueChange) is var (icon, title))
                    {
                        <FluentIcon Style="vertical-align: text-bottom" Value="@icon" Title="@title"/>
                    }
                }
            </TemplateColumn>
        }
        else if (TableType == MetricTable.TableType.Histogram)
        {
            var unit = PlotlyChart.GetDisplayedUnit(Instrument, false, Loc);
            // these colors line up with P50/P90/P99 colors for the plotly graph
            var percentileColumns = new List<(int Percentile, string UnderlineColor)> { (50, "#89B5D3"), (90, "#F9B980"), (99, "#8FC98F") };
            foreach (var (percentile, underlineColor) in percentileColumns)
            {
                <TemplateColumn Title="@($"P{percentile}")">
                    @if (context is MetricTable.HistogramMetric histogramMetric)
                    {
                        <span style="@($"text-decoration-thickness: 2px; text-decoration-line: underline; text-decoration-color: {underlineColor}; margin-right: 4px;")">@MetricTable.CalculatePercentile(percentile, (HistogramValue)context.Value) @unit</span>

                        if (GetIconAndTitleForDirection(histogramMetric.Percentiles[percentile].Change) is var (icon, title))
                        {
                            <FluentIcon Style="vertical-align: text-bottom" Value="@icon" Title="@title"/>
                        }
                    }
                </TemplateColumn>
            }
        }
        else
        {
            <TemplateColumn Title="@Loc[nameof(ControlsStrings.MetricTableCountColumnHeader)]">
                <span style="margin-right: 2px;">@context.Value.Count</span>

                @if (GetIconAndTitleForDirection(context.CountChange) is var (icon, title))
                {
                    <FluentIcon Style="vertical-align: text-bottom" Value="@icon" Title="@title"/>
                }
            </TemplateColumn>
        }
    </ChildContent>
    <EmptyContent>
        @Loc[nameof(ControlsStrings.MetricTableNoValuesYet)]
    </EmptyContent>
</FluentDataGrid>

@code {
    [Parameter, EditorRequired]
    public required MetricTable.TableType TableType { get; set; }

    [Parameter, EditorRequired]
    public required OtlpInstrument Instrument { get; set; }

    [Parameter, EditorRequired]
    public required IQueryable<MetricTable.Metric> Metrics { get; set; }

    [Parameter, EditorRequired]
    public required bool AnyDimensionsShown { get; set; }

}
