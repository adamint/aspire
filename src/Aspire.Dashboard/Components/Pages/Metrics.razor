@page "/metrics"
@page "/metrics/resource/{applicationName}"
@page "/metrics/resource/{applicationName}/meter/{meterName}"
@page "/metrics/resource/{applicationName}/meter/{meterName}/instrument/{instrumentName}"
@page "/metrics/resource/{applicationName}/highlights"
@page "/metrics/resource/{applicationName}/highlights/{highlightId}"

@using Aspire.Dashboard.Model.Otlp
@using Aspire.Dashboard.Resources
@using Aspire.Dashboard.Utils
@inject IStringLocalizer<Dashboard.Resources.Metrics> Loc
@inject IStringLocalizer<ControlsStrings> ControlsStringsLoc

<PageTitle><ApplicationName ResourceName="@nameof(Dashboard.Resources.Metrics.MetricsPageTitle)" Loc="@Loc" /></PageTitle>

<div class="page-content-container">
    <AspirePageContentLayout
        AddNewlineOnToolbar="true"
        @ref="_contentLayout"
        HeaderStyle="margin-bottom: calc(var(--design-unit) * 2px);"
        MobileToolbarButtonText="@Loc[nameof(Dashboard.Resources.Metrics.MetricsViewAttributesToolbar)]">
        <PageTitleSection>
            <h1 class="page-header">@Loc[nameof(Dashboard.Resources.Metrics.MetricsHeader)]</h1>
        </PageTitleSection>
        <ToolbarSection>
            <ResourceSelect Resources="_applicationViewModels"
                            AriaLabel="@ControlsStringsLoc[nameof(ControlsStrings.SelectAnApplication)]"
                            @bind-SelectedResource="PageViewModel.SelectedApplication"
                            @bind-SelectedResource:after="HandleSelectedApplicationChangedAsync"
                            CanSelectGrouping="true" />
            @if (PageViewModel.SelectedHighlight is not null)
            {
                <div slot="end">
                    <FluentMenuButton ButtonAppearance="Appearance.Stealth"
                                      Text="@(ControlsStringsLoc[PageViewModel.SelectedViewKind is MetricViewKind.Table ? nameof(ControlsStrings.ChartContainerTableTab) : nameof(ControlsStrings.ChartContainerGraphTab)])"
                                      OnMenuChanged="@HandleHighlightMetricViewKindChangedAsync"
                                      slot="end">
                        <FluentMenuItem Id="@MetricViewKind.Graph.ToString()">@ControlsStringsLoc[nameof(ControlsStrings.ChartContainerGraphTab)]</FluentMenuItem>
                        <FluentMenuItem Id="@MetricViewKind.Table.ToString()">@ControlsStringsLoc[nameof(ControlsStrings.ChartContainerTableTab)]</FluentMenuItem>
                    </FluentMenuButton>
                </div>

                <FluentDivider slot="end" Role="DividerRole.Presentation" Orientation="Orientation.Vertical" />
            }

            @if (!ViewportInformation.IsDesktop)
            {
                <FluentIcon slot="end" Icon="Icons.Regular.Size20.Clock" Style="margin-right:5px;"/>
            }

            <FluentSelect slot="end" TOption="SelectViewModel<TimeSpan>"
                          Items="@_durations"
                          OptionText="@(c => c.Name)"
                          @bind-SelectedOption="PageViewModel.SelectedDuration"
                          @bind-SelectedOption:after="HandleSelectedDurationChangedAsync"
                          AriaLabel="@Loc[nameof(Dashboard.Resources.Metrics.MetricsSelectADuration)]"/>

            @if (!ViewportInformation.IsDesktop && PageViewModel.Instruments?.Count > 0)
            {
                // Show metric selector in the toolbar for mobile, since we don't have enough room to show both
                // panels on a mobile viewport.
                <FluentInputLabel Label="@Loc[Dashboard.Resources.Metrics.MetricsInsturementNameGridNameColumnHeader]" ForId="metric-selector" />
                <TreeMetricSelector
                    PageViewModel="@PageViewModel"
                    HandleSelectedTreeItemChangedAsync="@HandleSelectedTreeItemChangedAsync"/>
            }
        </ToolbarSection>
        <MainSection>
            <div style="width: 100%; height: 100%; overflow: auto;">
                @if (PageViewModel.Instruments?.Count > 0)
                {
                    // Collapsed property only allows us to show Panel1 (which is the metric selector)
                    // but we want to only show Panel2 on mobile. So, hide the bar handle and reduce width to 0
                    // on mobile.
                    <FluentSplitter BarHandle="@ViewportInformation.IsDesktop"
                                    Style="height:100%"
                                    Panel1Size="@(ViewportInformation.IsDesktop ? "2fr" : "0")"
                                    Panel2Size="8fr"
                                    BarSize="@(ViewportInformation.IsDesktop ? 5 : 0)">
                        <Panel1>
                            <TreeMetricSelector
                                PageViewModel="@PageViewModel"
                                HandleSelectedTreeItemChangedAsync="@HandleSelectedTreeItemChangedAsync" />
                        </Panel1>
                        <Panel2>
                            <div>
                                <div class="metrics-content">
                                    @if (PageViewModel.SelectedHighlight is not null && PageViewModel.SelectedApplication.Id is not null)
                                    {
                                        <HighlightCharts Applications="@_applications"
                                                        Instruments="@PageViewModel.Instruments"
                                                        SelectedApplication="@PageViewModel.SelectedApplication"
                                                        SelectedDuration="@PageViewModel.SelectedDuration"
                                                        SelectedHighlight="@PageViewModel.SelectedHighlight"
                                                        SelectedMeter="@PageViewModel.SelectedMeter"
                                                        SelectedViewKind="@PageViewModel.SelectedViewKind"
                                                        OnViewChangedAsync="@OnViewChangedAsync"/>
                                    }
                                    else if (PageViewModel.HighlightsHomeSelected)
                                    {
                                        var instrumentModels = PageViewModel.Highlights
                                            .Where(PageViewModel.IsHighlightAvailable)
                                            .Select(i => new MetricInstrumentSelector.MetricInstrument(i.DisplayName, DashboardUrls.MetricsUrl(resource: PageViewModel.SelectedApplication.Name, duration: DurationMinutes, view: ViewKindName, highlight: i.Id), null));

                                        <MetricInstrumentSelector Title="@Loc[nameof(Dashboard.Resources.Metrics.HighlightsSectionName)]"
                                                                  PageViewModel="@PageViewModel"
                                                                  Instruments="@instrumentModels"
                                                                  ShowDescriptionColumn="false" />
                                    }
                                    else if (PageViewModel.SelectedApplication.Id?.ReplicaSetName != null && PageViewModel.SelectedMeter != null && PageViewModel.SelectedInstrument != null)
                                    {
                                        // We've got a selected instrument and application, so show the chart
                                        <SingleMetricChartContainer
                                            ApplicationKey="@(PageViewModel.SelectedApplication.Id.GetApplicationKey())"
                                            MeterName="@(PageViewModel.SelectedMeter.MeterName)"
                                            InstrumentName="@(PageViewModel.SelectedInstrument.Name)"
                                            Duration="PageViewModel.SelectedDuration.Id"
                                            ActiveView="@(PageViewModel.SelectedViewKind ?? MetricViewKind.Graph)"
                                            OnViewChangedAsync="@OnViewChangedAsync"
                                            Applications="_applications" />
                                    }
                                    else if (PageViewModel.SelectedMeter != null)
                                    {
                                        var instrumentModels = PageViewModel.Instruments
                                            .Where(i => i.Parent == PageViewModel.SelectedMeter)
                                            .Select(i => new MetricInstrumentSelector.MetricInstrument(i.Name, DashboardUrls.MetricsUrl(resource: PageViewModel.SelectedApplication.Name, meter: i.Parent.MeterName, instrument: i.Name, duration: DurationMinutes, view: ViewKindName), i.Description));

                                        <MetricInstrumentSelector Title="@PageViewModel.SelectedMeter.MeterName"
                                                                  PageViewModel="@PageViewModel"
                                                                  Instruments="@instrumentModels"
                                                                  ShowDescriptionColumn="true" />
                                    }
                                    else
                                    {
                                        @if (ViewportInformation.IsDesktop)
                                        {
                                            <p>@Loc[nameof(Dashboard.Resources.Metrics.MetricsSelectInstrument)]</p>
                                        }
                                        else
                                        {
                                            // class needed to prevent color from being removed from reboot style
                                            <a class="" @onclick="@(async () => await _contentLayout!.OpenMobileToolbarAsync())">
                                                @Loc[nameof(Dashboard.Resources.Metrics.MetricsSelectInstrument)]
                                            </a>
                                        }
                                    }
                                </div>
                            </div>
                        </Panel2>
                    </FluentSplitter>
                }
                else if (PageViewModel.Instruments == null)
                {
                    <div class="empty-content">
                        @if (ViewportInformation.IsDesktop)
                        {
                            <FluentIcon Icon="Icons.Regular.Size24.ChartMultiple"/>@:&nbsp;
                            @Loc[nameof(Dashboard.Resources.Metrics.MetricsSelectAResource)]
                        }
                        else
                        {
                            <FluentIcon Icon="Icons.Regular.Size24.ChartMultiple"/>@:&nbsp;
                            <a class="" @onclick="@(async () => await _contentLayout!.OpenMobileToolbarAsync())">@Loc[nameof(Dashboard.Resources.Metrics.MetricsSelectAResource)]</a>
                        }
                    </div>
                }
                else
                {
                    <div class="empty-content">
                        <FluentIcon Icon="Icons.Regular.Size24.ChartMultiple"/>&nbsp;@Loc[nameof(Dashboard.Resources.Metrics.MetricsNoMetricsForResource)]
                    </div>
                }
            </div>
        </MainSection>
    </AspirePageContentLayout>
</div>
