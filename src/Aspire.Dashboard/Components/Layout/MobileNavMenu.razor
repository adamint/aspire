<FluentMenu Open="@IsNavMenuOpen" Anchored="false" Style="grid-area: nav-menu; height: 100vh; margin-top: 2px;">
    @foreach (var item in GetMobileNavMenuEntries())
    {
        <FluentMenuItem  OnClick="@(async () => { CloseNavMenu(); await item.OnClick(); })" Style="height: 40px; width: 100vw; margin-bottom: 6px;">
            <span>@item.Text</span>

            @if (item.Icon is { } icon)
            {
                var isActive = item.Href is not null
                               && string.Equals(item.Href, $"/{NavigationManager.ToBaseRelativePath(NavigationManager.Uri)}");

                <span slot="start">
                    <FluentIcon Class="align-text-bottom" Value="@icon" Slot="start" Color="@(isActive ? Color.Accent : Color.Neutral)"/>
                </span>
            }
        </FluentMenuItem>

        <FluentDivider/>
    }
</FluentMenu>

@code {
    [Parameter, EditorRequired]
    public required bool IsNavMenuOpen { get; set; }

    [Parameter, EditorRequired]
    public required Action CloseNavMenu { get; set; }

    [Parameter, EditorRequired]
    public required Func<Task> LaunchHelpAsync { get; set; }

    [Parameter, EditorRequired]
    public required Func<Task> LaunchSettingsAsync { get; set; }
}
